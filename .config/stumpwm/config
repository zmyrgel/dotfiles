;; -*- mode: lisp; coding: utf-8-unix; indent-tabs-mode: nil -*-
;; .stumpwmrc --- Main configuration file for StumpWM
;;
;; Author: Timo Myyrä <timo.myyra@bittivirhe.fi>
;;
;; Created:
;; Time-stamp: <2022-12-11 22:49:02 (tmy)>
;; URL: https://github.com/zmyrgel/dotfiles/
;; Copyright (C) 2012 Timo Myyrä
;;
;; ----------------------------------------------------------------------------
;;  - Fix Webjump functionality
;;  - Fix Raise requests, cause StumpWM to crash
;;  - Rewrite contrib packages to more portable way
;;  - Scroll firefox without focusing its frame
;;  - Update hook + notify on IRC messages + other urgent messages
;;  - Prevent pop-ups from stealing focus from current frame
;;  - Remove useless keymaps somehow
;;  - test ttf fonts git clone https://github.com/lihebi/clx-truetype.git
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package :stumpwm)

#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

(ql:quickload '(slynk quri))

(defcommand start-slynk () ()
  (setf stumpwm:*top-level-error-action* :break)
  (slynk:create-server))

;; for stumptray
;; (ql:quickload 'xembed)

;; for ttf-fonts
(ql:quickload 'clx-truetype)

;; ---------------------------------------
;; Define global configurations

(defvar *font* "-*-terminus-medium-r-normal--16-*-*-*-*-*-iso10646-1"
  "Font to use for displaying stumwm ui elements.")

;; Update module directory path
(let ((module-dir (merge-pathnames ".config/stumpwm/modules"
                                      (user-homedir-pathname))))
  (when (probe-file module-dir)
    (set-module-dir module-dir)))

(defvar *wallpaper-path* (merge-pathnames "wallpapers"
                                          (user-homedir-pathname)))
(defvar *wallpaper-extensions* (list "png" "jpg" "jpeg"))

(defvar *local-display*
  (let ((host (uiop:hostname)))
    (cond ((string= host "asteroid.bittivirhe.fi")
           "eDP")
          (t
           "eDP1")))
  "Display used for main display as given by xrandr.")

(defvar *x-lock-command*
  (if (member :openbsd *features*)
      "xlock -mode blank"
      "xscreensaver-command -lock")
  "Command used to lock X session.")

(defvar *browser* "firefox"
  "Default web browser to use.")

(defvar *xterm* "xterm"
  "X terminal program to use.")

;; ---------------------------------------
;; Misc options

(defun update-window-title (window)
 "If the window comes up with no title, set the user title to the
window's instance name so it doesn't appear with no context on the
mode-line"
 (when (equal (window-title window) "")
   (setf (window-user-title window) (window-res window))))

(add-hook *new-window-hook* #'update-window-title)

(setf *mouse-focus-policy* :click)

;; Append colors to color map
;; XXX: add function to return name for hex value
;;      and to convert other color formats too
;; (setf *colors*
;;       (append *colors*
;;               (list *fg-color* "MidnightBlue")))
;; (update-color-map (current-screen))

;; Color scheme for Modus vivendi
;; (defvar *color-0* "#000000")
;; (defvar *color-1* "#ff8059")
;; (defvar *color-2* "#44bc44")
;; (defvar *color-3* "#d0bc00")
;; (defvar *color-4* "#2fafff")
;; (defvar *color-5* "#feacd0")
;; (defvar *color-6* "#00d3d0")
;; (defvar *color-7* "#bfbfbf")
;; (defvar *color-8* "#595959")
;; (defvar *color-9* "#ef8b50")
;; (defvar *color-10* "#70b900")
;; (defvar *color-11* "#c0c530")
;; (defvar *color-12* "#79a8ff")
;; (defvar *color-13* "#b6a0ff")
;; (defvar *color-14* "#6aefb9")
;; (defvar *color-15* "#ffffff")

;; Color scheme for Nord
(defvar *color-0* "#2e3440")
(defvar *color-1* "#3b4252")
(defvar *color-2* "#434c5e")
(defvar *color-3* "#4c566a")
(defvar *color-4* "#d8dee9")
(defvar *color-5* "#e5e9f0")
(defvar *color-6* "#eceff4")
(defvar *color-7* "#8fbcbb")
(defvar *color-8* "#88c0d0")
(defvar *color-9* "#81a1c1")
(defvar *color-10* "#5e81ac")
(defvar *color-11* "#bf616a")
(defvar *color-12* "#d08770")
(defvar *color-13* "#ebcb8b")
(defvar *color-14* "#a3be8c")
(defvar *color-15* "#b48ead")

(setq *colors*
      `(,*color-1*   ;; 0 black
        ,*color-11*  ;; 1 red
        ,*color-14*  ;; 2 green
        ,*color-13*  ;; 3 yellow
        ,*color-10*  ;; 4 blue
        ,*color-14*  ;; 5 magenta
        ,*color-8*   ;; 6 cyan
        ,*color-5*)) ;; 7 white

(set-border-color        *color-1*)
(set-focus-color         *color-1*)
(set-unfocus-color       *color-3*)
(set-float-focus-color   *color-1*)
(set-float-unfocus-color *color-3*)

;; (set-win-bg-color *bg-color*)
;; (set-focus-color "MidnightBlue")
;; (set-unfocus-color *fg-color*)

(when *initializing*
  (update-color-map (current-screen)))

;; ---------------------------------------
;; Message and Input Bar options

;; (set-fg-color *fg-color*)
;; (set-bg-color *bg-color*)
;; (set-border-color *fg-color*)

(set-msg-border-width 1)

(when *font*
  (set-font *font*))

(setf *message-window-padding* 20)
(setf *timeout-wait* 1)
;;(setf *message-window-gravity* :top-rigth)
;;(setf *input-window-gravity* :top-rigth)

;; ---------------------------------------
;; Window options

;; (setf *float-window-modifier* :super)

;;(setf *window-format* "%m%n%s%20t")
(setf *window-format* "%n: %30t")

;;       *maxsize-border-width* 1
;;       *transient-border-width* 1
;;       *normal-border-width* 1
;;       *window-border-style* :thin
;;       *window-name-source* :title)
;; (set-normal-gravity :top)
;; (set-maxsize-gravity :center)
;; (set-transient-gravity :center)

;; ---------------------------------------
;; Modeline options

(when *initializing*
  (unless (head-mode-line (current-head))
  (toggle-mode-line (current-screen) (current-head))))

(setf *mode-line-background-color* *color-1*)
(setf *mode-line-foreground-color* *color-5*)

(setf *mode-line-border-color* *color-1*)
(setf *mode-line-border-width* 0)

(setf *screen-mode-line-format* "{%g} [%W]")

;; (setf *screen-mode-line-format*
;;       "[^9*^B%n^b^n] %W
;; %d | %m %N ")
;; (setf *mode-line-position* :bottom
;;       *mode-line-border-width* 1
;;       *mode-line-pad-x* 1
;;       *mode-line-pad-y* 1
;;       *mode-line-background-color* "gray7"
;;       *mode-line-foreground-color* "gainsboro"
;;       *mode-line-border-color* "gray7"
;;       *mode-line-timeout* 1)

;; ---------------------------------------
;; Group options

(defun set-stumpwm-groups ()
  "Rename the first group to Emacs and create the other groups."
  (when *initializing*
    (grename "Dev")
    (gnewbg "Web")
    (gnewbg "IM")
    (gnewbg "Misc")
    (gnewbg "Games")
    (gnewbg "Remote"))
  ;; (setf (group-name (first (screen-groups (current-screen)))) "Dev")
  ;; (run-commands "gnewbg Web"
  ;;               "gnewbg IM"
  ;;               "gnewbg Misc"
  ;;               "gnewbg Remote"))
  )

;; ---------------------------------------
;; Frame options

(setf *dynamic-group-master-split-ratio* 1/2)

;; start numbering from 1 instead of 0
(setf *frame-number-map* "1234567890"
      *window-number-map* "1234567890")

(setf *suppress-frame-indicator* t)

;; Controlling Raise And Map Requests
(push '(:role "browser") stumpwm:*deny-map-request*)
(push '(:class "slack") stumpwm:*deny-map-request*)

;; Deny transient raise requests
;;(push '(:transient) *deny-map-request*)

;; Deny the all windows in the xterm class from taking focus.
;;(push '(:class "Xterm") *deny-raise-request*)
;;(push '(:class "UXterm") *deny-raise-request*)
;;(push '(:class "URxvt") *deny-raise-request*)

;; Window placement rules
(clear-window-placement-rules)

(define-frame-preference "Dev"
  (1 t t :class "Emacs"))

(define-frame-preference "Web"
  (2 t t :role "browser"))

(define-frame-preference "IM"
  (3 t t :class "Slack" :role "browser-window"))

(define-frame-preference "Games"
  (5 t t :class "Steam"))

(define-frame-preference "Remote"
  (6 t t :class "Remmina"))

;; ---------------------------------------
;; Functions

(defun select-random-background-image ()
  "Select a random image from wallpapers directory."
  (let ((file-list (remove-if-not (lambda (x)
                                    (member (pathname-type x) *wallpaper-extensions* :test #'string=))
                                  (list-directory *wallpaper-path*)))
        (*random-state* (make-random-state t)))
    (namestring (nth (random (length file-list)) file-list))))

(defun set-wallpaper ()
  (run-shell-command "xwallpaper --maximize ~/wallpapers/pluto_blueskies.png"))

(defun set-qwerty-input ()
  (run-shell-command "setxkbmap -layout us -variant altgr-intl -option ctrl:nocaps"))

(defun set-dvorak-input ()
  (run-shell-command "setxkbmap -layout us -variant dvorak -option ctrl:nocaps"))

(defun start-initial-apps ()
  (mapc #'run-shell-command
        '("xsetroot -solid rgb:11/11/11"
          "xsetroot -cursor_name left_ptr -fg black -bg white"
          "wmname LG3D")))

;; ---------------------------------------
;; MODULES

(defmacro with-module (name &rest body)
  "Load module with NAME and execute BODY if succesfull."
  `(handler-case
       (progn
         (load-module ,name)
         ,@body)
     (error (c)
       (format t "Unable to find module.~&")
       (values nil c))))

;; (with-module "stumptray"
;;   (stumptray::stumptray))

#+linux
(with-module "stump-nm"
  (define-key *root-map* (kbd "C-w") "nm-list-wireless-networks"))

#+linux
(with-module "end-session")

#+openbsd
(with-module "stumpwm-sndioctl"
  (define-key *top-map* (kbd "XF86AudioMute") "toggle-mute")
  (define-key *top-map* (kbd "XF86AudioLowerVolume") "volume-down")
  (define-key *top-map* (kbd "XF86AudioRaiseVolume") "volume-up"))

(with-module "globalwindows"
  (define-key *root-map* (kbd "M-1") "global-windowlist")
  (define-key *root-map* (kbd "M-2") "global-pull-windowlist"))

(with-module "notifications"
  (setf *screen-mode-line-format* (uiop:strcat uiop:strcat *screen-mode-line-format* " (%N)"))
  (define-key *root-map* (kbd "N") '*notifications-map*))

(with-module "urgentwindows"
             (define-key *root-map* (kbd "u") "raise-urgent"))

;;(xft:cache-fonts)
;; (clx-truetype:get-font-families)
(with-module "ttf-fonts"
             (setf *font*
                   (make-instance 'xft:font :family "InputMono Medium" :subfamily "Regular" :size 6 :antialias t)
                   "Default font to use in StumpWM UI.")
             (set-font *font*))

;; ---------------------------------------
;; Commands

;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
    (when cmd
      (eval-command cmd t))))

(defcommand paste-x-selection () (:rest)
  "Universal rat-less X paste."
  (let ((cmd (concatenate 'string "insert " (get-x-selection))))
    (eval-command cmd)))

(defcommand firefox () ()
  "run or raise firefox"
  (run-or-raise "firefox" '(:class "Firefox")))

#+linux
(defcommand steam () ()
  "run or raise Steam app"
  (run-or-raise "steam" '(:class "Steam")))

#+linux
(defcommand slack () ()
  "run or raise Slack app"
  (run-or-raise "slack" '(:class "Slack")))

(defcommand remmina () ()
  "run or raise the Remmina remote connection manager."
  (run-or-raise "steam" '(:class "Steam")))

;; TODO: check why using thread here
;; (defcommand firefox () ()
;;   "Run or raise Firefox."
;;   (sb-thread:make-thread (lambda ()
;;                            (run-or-raise "firefox" '(:class "Firefox") t nil))))


(defcommand delete-window-and-frame () ()
  "Delete the current frame with its window."
  (delete-window)
  (remove-split))

(defcommand hsplit-and-focus () ()
  "Create a new frame on the right and focus it."
  (hsplit)
  (move-focus :right))

(defcommand vsplit-and-focus () ()
  "Create a new frame below and move focus to it."
  (vsplit)
  (move-focus :down))

(defcommand term (&optional program) ()
  "Invoke a terminal, possibly with a @arg{program}."
  (sb-thread:make-thread
   (lambda ()
     (run-shell-command (format nil "~a ~a" *xterm* program)))))

;; Web jump (works for Google and Imdb)
(defmacro make-web-jump (name prefix)
  `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
     (when search
      (run-shell-command (concatenate 'string ,*browser* " " ,prefix (quri:url-encode search))))))

(make-web-jump "ddg" "https://www.duckduckgo.com?q=")

;; ---------------------------------------
;; HOOKS

;(add-hook *start-hook* #'set-displays)
(add-hook *start-hook* #'set-stumpwm-groups)
(add-hook *start-hook* #'set-wallpaper)

;; ---------------------------------------
;; KEYBINDINGS

;; register AltGr key
;;(setf *altgr-offset* 4)
;;(register-altgr-as-modifier)

;; Browse somewhere
(define-key *root-map* (kbd "C-b") (uiop:strcat "colon1 exec " *browser* " https://www."))
;; Ssh somewhere
(define-key *root-map* (kbd "C-s") "colon1 exec xterm -e ssh ")

;; paste
(define-key *root-map* (kbd "y") "paste-x-selection")

;(define-key *root-map* (kbd "s") "slack"))

;; C-t M-s is a terrble binding, but you get the idea.
(define-key *root-map* (kbd "i") "ddg")

;; allow locking x
(define-key *root-map* (kbd "L") (uiop:strcat "exec " *x-lock-command*))

;; Emacs Style Frame Splitting
;; (loop for n below 10
;;       do (undefine-key *root-map* (kbd (write-to-string n))))
;; (define-key *root-map* (kbd "0") "remove")
;; (define-key *root-map* (kbd "1") "only")
;; (define-key *root-map* (kbd "2") "vsplit")
;; (define-key *root-map* (kbd "3") "hsplit")

(defvar *applications-keymap*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "b") "firefox")
    (define-key m (kbd "s") "slack")
    (define-key m (kbd "S") "steam")
    (define-key m (kbd "r") "remmina")
    (define-key m (kbd "g") "exec gimp")
    m))

(define-key *root-map* (kbd "C") *applications-keymap*)

(defvar *session-keymap*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "q") "end-session")
    (define-key m (kbd "l") "logout")
    (define-key m (kbd "s") "suspend-computer")
    (define-key m (kbd "S") "shutdown-computer")
    (define-key m (kbd "r") "loadrc")
    (define-key m (kbd "R") "restart-hard")
    (define-key m (kbd "C-r") "restart-computer")
    m))

(defvar *keyboard-layout-keymap*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "d") "exec setxkbmap dvorak")
    (define-key m (kbd "u") "exec setxkbmap us")
    m))
;;(define-key *root-map* (kbd "k") '*keyboard-layout-keymap*)

(define-remapped-keys
    '(("(Firefox|Chrome)"
       ("C-n"   . "Down")
       ("C-p"   . "Up")
       ("C-f"   . "Right")
       ("C-b"   . "Left")
       ("C-v"   . "Next")
       ("M-v"   . "Prior")
       ("M-w"   . "C-c")
       ("C-w"   . "C-x")
       ("C-y"   . "C-v")
       ("M-<"   . "Home")
       ("M->"   . "End")
       ("C-M-b" . "M-Left")
       ("C-M-f" . "M-Right")
       ("C-k"   . ("C-S-End" "C-x"))
       ("C-s"   . "C-f"))))

(define-key *root-map* (kbd "C-q") "send-raw-key")

(define-key *root-map* (kbd "B") "mode-line")

;; s-[0-9] moves to a numbered group.
;; (loop for i from 1 to 9
;;    do (define-key *top-map* (kbd (format nil "s-~A" i))
;; 	(format nil "gselect ~A" i)))

;; ;; Query addresses
;; (defvar *query-map* nil
;;   "The keymap with net queries (e.g. IMDB)")

;; (setf *query-map*
;;       (let ((m (make-sparse-keymap)))
;;         (define-key m (kbd "i") "imdb")
;;         (define-key m (kbd "g") "google")
;;         (define-key m (kbd "w") "wikipedia")
;;         m))

;; easy group change
(define-key *top-map* (kbd "s-,") "gprev")
(define-key *top-map* (kbd "s-.") "gnext")

;; Swap quoteright and " in commands
(define-key *groups-map* (kbd "quoteright") "grouplist")
(define-key *groups-map* (kbd "\"") "gselect")
(define-key *root-map* (kbd "quoteright") "windowlist")
(define-key *root-map* (kbd "\"") "select")

;; undefine unused bindings
(undefine-key *root-map* (kbd "C-c"))
(undefine-key *root-map* (kbd "C-a"))
(undefine-key *root-map* (kbd "C-p"))
(undefine-key *root-map* (kbd "C-n"))
(undefine-key *root-map* (kbd "C-m"))
(undefine-key *root-map* (kbd "C-l"))
(undefine-key *root-map* (kbd "C-k"))
