;;; -*- mode: lisp; coding: utf-8-unix; indent-tabs-mode: nil -*-
;;; .stumpwmrc --- Main configuration file for StumpWM
;;;
;;; Author: Timo Myyrä <timo.myyra@bittivirhe.fi>
;;;
;;; Created:
;;; Time-stamp: <2024-09-15 08:08:42 (tmy)>
;;; URL: https://github.com/zmyrgel/dotfiles/
;;; Copyright (C) 2012 Timo Myyrä
;;;
;;; ----------------------------------------------------------------------------
;;;  - Fix Webjump functionality
;;;  - Fix Raise requests, causes StumpWM to crash
;;;  - Rewrite contrib packages to more portable way
;;;  - Scroll firefox without focusing its frame
;;;  - Update hook + notify on IRC messages + other urgent messages
;;;  - Prevent pop-ups from stealing focus from current frame
;;;  - Remove useless keymaps somehow
;;;  - test ttf fonts git clone https://github.com/lihebi/clx-truetype.git
;;;  - Set UIOP/CONFIGURATION:*USER-CACHE* during build to avoid following paths:
;;;  - SB-IMPL::DIR = (:ABSOLUTE "stumpwm-23.11_writes_to_HOME" ".cache" "common-lisp" "sbcl-2.4.4.openbsd.sbcl-2.4.4-bsd-x64" "home" "tmy" "quicklisp" "dists" "quicklisp" "software" "trivial-features-20230618-git" "src")
;;;  - set XDG_CACHE_HOME during build? push to sb
;;;  - Alt-. -> find-file-noselect: Getting attributes: Permission denied, /usr/obj/ports/stumpwm-23.11/stumpwm-23.11/pathnames.lisp
;;;  -- Use logical-translation like SBCL sources?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package :stumpwm)

#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

(ql:quickload '(slynk quri))

(defcommand start-slynk () ()
  (setf stumpwm:*top-level-error-action* :break)
  (slynk:create-server))

;; for stumptray
;; (ql:quickload 'xembed)

;; for swm-ssh
(ql:quickload :cl-ppcre)

;; for ttf-fonts
(ql:quickload 'clx-truetype)

;; ---------------------------------------
;; Define global configurations

(defvar *font* "-*-terminus-medium-r-normal--16-*-*-*-*-*-iso10646-1"
  "Font to use for displaying StumWM UI elements.")

;; Update module directory path
(let ((module-dir (merge-pathnames ".config/stumpwm/modules/"
                                   (user-homedir-pathname))))
  (when (probe-file module-dir)
    (set-module-dir module-dir)))

(defvar *wallpaper-path* (merge-pathnames "wallpapers/"
                                          (user-homedir-pathname)))
(defvar *wallpaper-extensions* '("png" "jpg" "jpeg"))

(defvar *local-display*
  (let ((host (uiop:hostname)))
    (cond ((string= host "asteroid.bittivirhe.fi")
           "eDP")
          (t
           "eDP1")))
  "Display used for main display as given by xrandr.")

(defvar *x-lock-command*
  (if (member :openbsd *features*)
      "xlock -mode blank"
      "xscreensaver-command -lock")
  "Command used to lock X session.")

(defvar *browser* "firefox"
  "Default web browser to use.")

(defvar *xterm* "xterm"
  "X terminal program to use.")

;; (defvar *data-dir* (merge-pathnames ))?
;; log everything to ~/.stumpwm.d/stumpwm.log
;; (redirect-all-output (merge-pathnames *data-dir* "stumpwm.log"))

;; ---------------------------------------
;; Misc options

;; (when *initializing*
;;   (update-color-map (current-screen)))

;; ---------------------------------------
;; Message and Input Bar options

(set-msg-border-width 1)
(when *font*
  (set-font *font*))

(setf *message-window-padding* 20)
(setf *timeout-wait* 5)
(setf *message-window-gravity* :top-right)
(setf *input-window-gravity* :top-right)

;; ---------------------------------------
;; Window options

(defun update-window-title (window)
 "If the window comes up with no title, set the user title to the
window's instance name so it doesn't appear with no context on the
mode-line"
 (when (equal (window-title window) "")
   (setf (window-user-title window) (window-res window))))

(add-hook *new-window-hook* #'update-window-title)

(setf *float-window-modifier* :meta)
(setf *mouse-focus-policy* :click)

(setf *key-seq-color* "^3")
(setf *which-key-format* (concat *key-seq-color* "*~5a^n ~a"))

(setf *window-format* "%n: %30t")
(setf *maxsize-border-width* 1)
(setf *transient-border-width* 1)
(setf *normal-border-width* 1)
(setf *window-border-style* :thin)
(setf *window-name-source* :title)

;; (sync-all-frame-windows (group-number 1))
(set-normal-gravity :top)
(set-maxsize-gravity :center)
(set-transient-gravity :center)

;; ---------------------------------------
;; Modeline options

(when *initializing*
  (unless (head-mode-line (current-head))
  (toggle-mode-line (current-screen) (current-head))))

(setf *mode-line-position* :top)
(setf *mode-line-border-width* 0)

(setf *screen-mode-line-format* "{%g} | %W")
(setf *mode-line-timeout* 60) ;; default 60

;; ---------------------------------------
;; Group options

(when *initializing*
  (grename "Dev")
  (gnewbg "Web")
  (gnewbg "IM")
  (gnewbg "Misc")
  (gnewbg "Games")
  (gnewbg "Remote"))

;; ---------------------------------------
;; Frame options

(setf *dynamic-group-master-split-ratio* 1/2)

;; start numbering from 1 instead of 0
(setf *frame-number-map* "1234567890"
      *window-number-map* "1234567890")

(setf *suppress-frame-indicator* t)

;; Controlling Raise And Map Requests
(push '(:role "browser") stumpwm:*deny-map-request*)
(push '(:class "slack") stumpwm:*deny-map-request*)

;; Deny transient raise requests
;;(push '(:transient) *deny-map-request*)

;; Deny the all windows in the xterm class from taking focus.
;;(push '(:class "Xterm") *deny-raise-request*)
;;(push '(:class "UXterm") *deny-raise-request*)
;;(push '(:class "URxvt") *deny-raise-request*)

;; Window placement rules
(clear-window-placement-rules)

(define-frame-preference "Dev"
  (1 t t :class "Emacs"))

(define-frame-preference "Web"
  (2 t t :role "browser"))

(define-frame-preference "IM"
  (3 t t :class "Slack" :role "browser-window"))

(define-frame-preference "Games"
  (5 t t :class "Steam"))

(define-frame-preference "Remote"
  (6 t t :class "Remmina"))

;; ---------------------------------------
;; Functions

(defun select-random-background-image ()
  "Select a random image from wallpapers directory."
  (let ((file-list (remove-if-not (lambda (file)
                                    (member (pathname-type file) *wallpaper-extensions* :test #'string=))
                                  (list-directory *wallpaper-path*)))
        (*random-state* (make-random-state t)))
    (namestring (nth (random (length file-list)) file-list))))

(defun set-wallpaper ()
 (run-shell-command "xwallpaper --maximize ~/wallpapers/pluto_blueskies.png"))

(defun set-qwerty-input ()
  (run-shell-command "setxkbmap -layout us -variant altgr-intl -option ctrl:nocaps"))

(defun set-dvorak-input ()
  (run-shell-command "setxkbmap -layout us -variant dvorak -option ctrl:nocaps"))

(defun start-initial-apps ()
  (mapc #'run-shell-command
        '("xsetroot -solid rgb:11/11/11"
          "xsetroot -cursor_name left_ptr -fg black -bg white"
          "wmname LG3D")))

;; ---------------------------------------
;; MODULES

(defmacro with-module (name &rest body)
  "Load module with NAME and execute BODY if succesfull."
  `(handler-case
       (progn
         (load-module ,name)
         ,@body)
     (error (c)
       (format t "Unable to find module.~&")
       (values nil c))))

;; (with-module "stumptray"
;;   (stumptray::stumptray))

#+linux
(with-module "stump-nm"
  (define-key *root-map* (kbd "C-w") "nm-list-wireless-networks"))

#+linux
(with-module "end-session")

#+openbsd
(with-module "stumpwm-sndioctl"
  (define-key *top-map* (kbd "XF86AudioMute") "toggle-mute")
  (define-key *top-map* (kbd "XF86AudioLowerVolume") "volume-down")
  (define-key *top-map* (kbd "XF86AudioRaiseVolume") "volume-up"))

(with-module "globalwindows"
  (define-key *root-map* (kbd "M-1") "global-windowlist")
  (define-key *root-map* (kbd "M-2") "global-pull-windowlist"))

(with-module "notifications"
  (setf *screen-mode-line-format* (uiop:strcat *screen-mode-line-format* " (%N)"))
  (define-key *root-map* (kbd "N") '*notifications-map*))

(with-module "urgentwindows"
  (define-key *root-map* (kbd "u") "raise-urgent"))

;;(xft:cache-fonts)
;; (clx-truetype:get-font-families)
(with-module "ttf-fonts"
  ;; "Default font to use in StumpWM UI."
  (setf *font*
        (make-instance 'xft:font :family "InputMono Medium" :subfamily "Regular" :size 6 :antialias t))
  (set-font *font*))

#-openbsd
(with-module "swm-ssh"
  (setq swm-ssh:*swm-ssh-default-term* *xterm*)
  (define-key *root-map* (kbd "C-a") "swm-ssh-menu"))

#-openbsd
(with-module "clipboard-history"
  (define-key *root-map* (kbd "C-y") "show-clipboard-history")
  ;; start the polling timer process
  (clipboard-history:start-clipboard-manager))

;; (with-module "kbd-layouts"
;;   (setf kbd-layouts:*caps-lock-behavior* :ctrl)
;;   (keyboard-layout-list "us" "dvorak -variant phonetic")
;;   )

(with-module "stumpwm-themes"
  (stumpwm-themes:define-theme "Modus Vivendi"
      (set-bg-color "#000000")
    (set-fg-color "#ffffff")
    (set-border-color "#000000")
    (set-focus-color "#000000")
    (set-unfocus-color "#d0bc00")
    (setf *mode-line-background-color* "#1c1c1c"
          *mode-line-foreground-color* "#4e4e4e")
    (setf *colors* '("#000000" "#ff5f59" "#44bc44" "#d0bc00"
                     "#2fafff" "#feacd0" "#00d3d0" "#ffffff"))))

;; checkout: lookup
;; ---------------------------------------
;; Commands

;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial "")) (:rest)
  (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
    (when cmd
      (eval-command cmd t))))

(defcommand paste-x-selection () (:rest)
  "Universal rat-less X paste."
  (let ((cmd (concatenate 'string "insert " (get-x-selection))))
    (eval-command cmd)))

(defcommand firefox () ()
  "run or raise firefox"
  (run-or-raise "firefox" '(:class "Firefox")))

#+linux
(defcommand steam () ()
  "run or raise Steam app"
  (run-or-raise "steam" '(:class "Steam")))

#+linux
(defcommand slack () ()
  "run or raise Slack app"
  (run-or-raise "slack" '(:class "Slack")))

(defcommand remmina () ()
  "run or raise the Remmina remote connection manager."
  (run-or-raise "steam" '(:class "Steam")))

;; TODO: check why using thread here
;; (defcommand firefox () ()
;;   "Run or raise Firefox."
;;   (sb-thread:make-thread (lambda ()
;;                            (run-or-raise "firefox" '(:class "Firefox") t nil))))

(defcommand delete-window-and-frame () ()
  "Delete the current frame with its window."
  (delete-window)
  (remove-split))

(defcommand hsplit-and-focus () ()
  "Create a new frame on the right and focus it."
  (hsplit)
  (move-focus :right))

(defcommand vsplit-and-focus () ()
  "Create a new frame below and move focus to it."
  (vsplit)
  (move-focus :down))

(defcommand term (&optional program) ()
  "Invoke a terminal, possibly with a @arg{program}."
  (sb-thread:make-thread
   (lambda ()
     (run-shell-command (format nil "~a ~a" *xterm* program)))))

;; Web jump (works for Google and Imdb)
(defmacro make-web-jump (name prefix)
  `(defcommand ,(intern name) (search) ((:rest ,(concatenate 'string name " search: ")))
     (when search
      (run-shell-command (concatenate 'string ,*browser* " " ,prefix (quri:url-encode search))))))

(make-web-jump "ddg" "https://www.duckduckgo.com?q=")

;; ---------------------------------------
;; HOOKS

;;(add-hook *start-hook* #'set-displays)
;;(add-hook *start-hook* #'set-stumpwm-groups)
;;(add-hook *start-hook* #'set-wallpaper)

;; ---------------------------------------
;; KEYBINDINGS

;; register AltGr key
;;(setf *altgr-offset* 4)
;;(register-altgr-as-modifier)

;; Browse somewhere
(define-key *root-map* (kbd "C-b") (format nil "colon1 exec ~a  https://www." *browser*))
;; Ssh somewhere
(define-key *root-map* (kbd "C-s") "colon1 exec xterm -e ssh ")

;; paste
(define-key *root-map* (kbd "y") "paste-x-selection")

;(define-key *root-map* (kbd "s") "slack"))

;; C-t M-s is a terrble binding, but you get the idea.
(define-key *root-map* (kbd "i") "ddg")

;; allow locking x
(define-key *root-map* (kbd "L") (format nil "exec ~a" *x-lock-command*))

;; Emacs Style Frame Splitting
;; (loop for n below 10
;;       do (undefine-key *root-map* (kbd (write-to-string n))))
;; (define-key *root-map* (kbd "0") "remove")
;; (define-key *root-map* (kbd "1") "only")
;; (define-key *root-map* (kbd "2") "vsplit")
;; (define-key *root-map* (kbd "3") "hsplit")

(defvar *applications-keymap*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "b") "firefox")
    (define-key m (kbd "s") "slack")
    (define-key m (kbd "S") "steam")
    (define-key m (kbd "r") "remmina")
    (define-key m (kbd "g") "exec gimp")
    m))

(define-key *root-map* (kbd "C") *applications-keymap*)

(defvar *session-keymap*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "q") "end-session")
    (define-key m (kbd "l") "logout")
    (define-key m (kbd "s") "suspend-computer")
    (define-key m (kbd "S") "shutdown-computer")
    (define-key m (kbd "r") "loadrc")
    (define-key m (kbd "R") "restart-hard")
    (define-key m (kbd "C-r") "restart-computer")
    m))

;; TODO: check how xmodmap module works
;; (defvar *keyboard-layout-keymap*
;;   (let ((m (make-sparse-keymap)))
;;     (define-key m (kbd "d") "exec setxkbmap dvorak")
;;     (define-key m (kbd "u") "exec setxkbmap us")
;;     m))
;;(define-key *root-map* (kbd "k") '*keyboard-layout-keymap*)

(define-remapped-keys
    '(("(Firefox|Chrome)"
       ("C-n"   . "Down")
       ("C-p"   . "Up")
       ("C-f"   . "Right")
       ("C-b"   . "Left")
       ("C-v"   . "Next")
       ("M-v"   . "Prior")
       ("M-w"   . "C-c")
       ("C-w"   . "C-x")
       ("C-y"   . "C-v")
       ("M-<"   . "Home")
       ("M->"   . "End")
       ("C-M-b" . "M-Left")
       ("C-M-f" . "M-Right")
       ("C-k"   . ("C-S-End" "C-x"))
       ("C-s"   . "C-f"))))

(define-key *root-map* (kbd "C-q") "send-raw-key")

(define-key *root-map* (kbd "B") "mode-line")

;; s-[0-9] moves to a numbered group.
;; (loop for i from 1 to 9
;;    do (define-key *top-map* (kbd (format nil "s-~A" i))
;; 	(format nil "gselect ~A" i)))

;; Query addresses
;; (defvar *query-map* nil
;;   "The keymap with net queries (e.g. IMDB)")

;; (setf *query-map*
;;       (let ((m (make-sparse-keymap)))
;;         (define-key m (kbd "i") "imdb")
;;         (define-key m (kbd "g") "google")
;;         (define-key m (kbd "w") "wikipedia")
;;         m))

;; easy group change
(define-key *top-map* (kbd "s-,") "gprev")
(define-key *top-map* (kbd "s-.") "gnext")

;; Swap quoteright and " in commands
(define-key *groups-map* (kbd "quoteright") "grouplist")
(define-key *groups-map* (kbd "\"") "gselect")
(define-key *root-map* (kbd "quoteright") "windowlist")
(define-key *root-map* (kbd "\"") "select")

;; undefine unused bindings
(undefine-key *root-map* (kbd "C-c"))
(undefine-key *root-map* (kbd "C-a"))
(undefine-key *root-map* (kbd "C-p"))
(undefine-key *root-map* (kbd "C-n"))
(undefine-key *root-map* (kbd "C-m"))
(undefine-key *root-map* (kbd "C-l"))
(undefine-key *root-map* (kbd "C-k"))
