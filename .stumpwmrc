;; -*- mode: lisp; coding: utf-8-unix; indent-tabs-mode: nil -*-
;; .stumpwmrc --- Main configuration file for StumpWM
;;
;; Author: Timo Myyrä <timo.myyra@gmail.com>
;;
;; Created:
;; Time-stamp: <2012-03-05 10:42:25 (tmy)>
;; URL: http://www.wickedbsd.net/~zmyrgel/dotfiles/
;; Copyright (C) 2012 Timo Myyrä
;;
;; ----------------------------------------------------------------------------
;;
;; Commentary:
;;
;; Basic config file copied from the samples from the StumpWM Fix
;;
;; -----------------------------------------------------------------:
;;  - Fix Webjump functionality
;;  - Fix Raise requests, cause StumpWM to crash
;;  - Rewrite contrib packages to more portable way
;;  - Replace zmenu wrapper with function call
;;  - Scroll firefox without focusing its frame
;;  - Update hook + notify on IRC messages + other urgent messages
;;  - Prevent pop-ups from stealing focus from current frame
;;  - Remove useless keymaps somehow
;;  - Fix MPD modeline on stopped state
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-package :stumpwm)

;; #+sbcl
;; (progn
;;   (load "/home/tmy/.emacs.d/elisp/slime/swank-loader.lisp")
;;   (swank-loader:init)
;;   (defcommand swank () ()
;;     (setf stumpwm:*top-level-error-action* :break)
;;     (and (swank:create-server :port swank::default-server-port
;;                               :style swank:*communication-style*
;;                               :coding-system "utf-8-unix"
;;                               :dont-close t))
;;     (echo-string (current-screen) "Starting Swank")))

;; ---------------------------------------
;; Define the background window
;; XXX: add check to see if directory exists
(defvar *background-image-path* "/media/nfs/wallpapers/")
(defun select-random-background-image ()
  "Select a random image"
  (let ((file-list (directory
                    (concatenate 'string *background-image-path* "*.jpg")))
        (*random-state* (make-random-state t)))
    (namestring (nth (random (length file-list)) file-list))))

;; ---------------------------------------
;; Contrib modules
(dolist (m '("mpd" "notifications" "battery" "maildir" "cpu" "net" "wifi"))
  (load-module m))

;; ---------------------------------------
;; Misc options

(setf *mouse-focus-policy* :click)
(setf *data-dir* "/home/tmy/.stumpwm.d/")
(set-contrib-dir (concatenate 'string *data-dir* "contrib"))
(setf *shell-program* (stumpwm::getenv "SHELL"))

;; Append colors to color map
;; XXX: add function to return name for hex value
;;      and to convert other color formats too
(setf *colors*
      (append *colors*
              (list "gainsboro" "MidnightBlue")))
(update-color-map (current-screen))

;; ---------------------------------------
;; MPD options

(setf *mpd-current-song-fmt* "%a - %t"
      *mpd-modeline-fmt* "%S: %a - %t (%e/%l)"
      *menu-maximum-height* 50
      *mpd-collapse-album-length* 20
      *mpd-collapse-all-length* 40)
;;(mpd-connect)

;; ---------------------------------------
;; Message and Input Bar options

(set-fg-color "gainsboro")
(set-bg-color "gray7")
(set-border-color "gainsboro")
(set-msg-border-width 1)
(set-font "-*-terminus-*-r-normal-*-16-*-*-*-*-*-*-*")
(setf *message-window-padding* 20
      *message-window-gravity* :top-rigth
      *timeout-wait* 1
      *input-window-gravity* :top-rigth)

;; ---------------------------------------
;; Window options

(setf *window-format* "%m%n%s%20t"
      *maxsize-border-width* 1
      *transient-border-width* 1
      *normal-border-width* 1
      *window-border-style* :thin
      *window-name-source* :title)
(set-win-bg-color "gray7")
(set-focus-color "MidnightBlue")
(set-unfocus-color "gainsboro")
(set-normal-gravity :top)
(set-maxsize-gravity :center)
(set-transient-gravity :center)

;; ---------------------------------------
;; Modeline options

(setf *screen-mode-line-format*
      "[^9*^B%n^b^n] %W
%d | %m %N ")
(setf *mode-line-position* :bottom
      *mode-line-border-width* 1
      *mode-line-pad-x* 1
      *mode-line-pad-y* 1
      *mode-line-background-color* "gray7"
      *mode-line-foreground-color* "gainsboro"
      *mode-line-border-color* "gray7"
      *mode-line-timeout* 1)

;; Switch mode-line on only if needed. Found at:
;; http://hcl-club.lu/svn/development/lisp/.stumpwmrc
(when (not (head-mode-line (current-head)))
  (toggle-mode-line (current-screen) (current-head)))

;; ---------------------------------------
;; Group options

;; Rename the first group to Emacs and create the other groups.
;; Found at: http://en.wikipedia.org/wiki/User:Gwern/.stumpwmrc
(setf (group-name (first (screen-groups (current-screen)))) "Emacs")
(run-commands "gnewbg Web"
              "gnewbg Term"
              "gnewbg Mail"
              "gnewbg IM"
              "gnewbg Misc"
              "gnewbg Remote")

;; ---------------------------------------
;; Frame options

;; See: http://lists.gnu.org/archive/html/stumpwm-devel/2006-08/msg00002.html
;; Found at: http://en.wikipedia.org/wiki/User:Gwern/.stumpwmrc
(setf *frame-number-map* "1234567890"
      *window-number-map* "1234567890"
      *suppress-frame-indicator* t)

;; Controlling Raise And Map Requests
;; Deny the firefox window from taking focus when clicked upon.
;;(push '(:class "gecko") *deny-raise-request*)

;; Deny transient raise requests
;;(push '(:transient) *deny-map-request*)

;; Deny the all windows in the xterm class from taking focus.
;;(push '(:class "Xterm") *deny-raise-request*)
;;(push '(:class "UXterm") *deny-raise-request*)
;;(push '(:class "URxvt") *deny-raise-request*)

;; Window placement rules
(clear-window-placement-rules)

(define-frame-preference "Emacs"
    (1 t t :class "Emacs"))

(define-frame-preference "Web"
    (1 t t :class "Firefox"))

(define-frame-preference "Term"
    (1 t t :class "Xterm"))

(define-frame-preference "Mail"
    (1 t t :class "GroupWise"))

(define-frame-preference "IM"
    (1 t t :class "skype" :role "MainWindow")
  (2 t t :class "skype" :role "Chats"))

(define-frame-preference "Remote"
    (1 t t :class "Remmina"))

;; ---------------------------------------
;; Functions

(defun shell-command (command)
  "Run a shell command and display output to screen.
   This must be used in a functional side-effects-free style!
   If a program does not exit of its own accord, Stumpwm might hang!"
  (check-type command string)
  (echo-string (current-screen) (run-shell-command command t)))

;; ---------------------------------------
;; Commands

;; XXX: WIP
;; (defcommand ssh (host)
;;   ((:string "SSH to: "))
;;   (run-shell-command (concatenate 'string "/usr/bin/ssh " host) t))

(defcommand gselect-or-create (group-number)
  ((:number "Group number: "))
  (gselect
   (or (select-group (current-screen) (format nil "~A" group-number) )
       (let ((group (add-group (current-screen) (format nil "~A" group-number))))
         (setf (group-number group) group-number)
         group))))

(defcommand shell-command (command)
  ((:string "sh: "))
  (check-type command string)
  (shell-command command))

;; prompt the user for an interactive command. The first arg is an
;; optional initial contents.
(defcommand colon1 (&optional (initial ""))
  (:rest)
  (let ((cmd (read-one-line (current-screen) ": " initial)))
    (when cmd
      (eval-command cmd t))))

(defcommand pull-window-from-list (&optional (fmt *window-format*)) (:rest)
            "Allow the user to Select a window from the list of windows and pull
the selected window into the current frame. For information of menu bindings
@xref{Menus}. The optional argument @var{fmt} can be specified to
override the default window formatting."
            (if (null (group-windows (current-group)))
                (message "No Managed windows")
                (let* ((group (current-group))
                       (window (second (select-from-menu
                                        (current-screen)
                                        (mapcar
                                         (lambda (w)
                                           (list
                                            (format-expand *window-formatters* fmt w) w))
                                         (sort-windows group))))))
                  (if window
                      (pull-window window)
                      (throw 'error :abort)))))

(defcommand paste-x-selection () (:rest)
  "Universal rat-less X paste."
  (let ((cmd (concatenate 'string "insert " (get-x-selection))))
    (eval-command cmd)))

(define-stumpwm-type :password (input prompt)
  (let ((history *input-history*)
        (arg (argument-pop input))
        (fn (symbol-function 'draw-input-bucket)))
    (unless arg
      (unwind-protect
           (setf (symbol-function 'draw-input-bucket)
                 (lambda (screen prompt input &optional errorp)
                   (let ((i (copy-structure input)))
                     (setf (input-line-string i)
                           (make-string (length (input-line-string i))
                                        :initial-element #\*))
                     (funcall fn screen prompt i)))
                 arg (read-one-line (current-screen) prompt))
        (setf (symbol-function 'draw-input-bucket) fn
              *input-history* history))
      arg)))

;;; Found in git://github.com/kitokitoki/stumpwmrc.git
(defmacro define-sudo-command (name command &key output)
  (let ((cmd (gensym)))
    `(defcommand ,name (password) ((:password "sudo password: "))
                 (let ((,cmd (concatenate 'string "echo '" password "' | sudo -S " ,command)))
                   ,(if output
                        `(run-prog-collect-output *shell-program* "-c" ,cmd)
                        `(run-prog *shell-program* :args (list "-c" ,cmd) :wait nil))))))

(define-sudo-command reboot "reboot")
(define-sudo-command shutdown "shutdown -h now")

(defmacro define-web-jump (name url-prefix)
  `(defcommand ,name (search)
     ((:rest ,(string-capitalize
               (string-downcase
                (concatenate 'string (symbol-name name) ": ")))))
     (run-shell-command (format nil "firefox '~A~A'"
                                ,url-prefix (substitute #\+ #\Space search)))))

;;(format t "firefox '~A~A'" ,url-prefix (substitute #\+ #\Space search))
(define-web-jump imdb "http://www.imdb.com/find?q")
(define-web-jump google "http://www.google.fi/search?q")
(define-web-jump wikipedia "http://en.wikipedia.org/wiki/Special:Search?fulltext=Search&search")

(defcommand firefox () ()
  "run firefox"
  (run-or-raise "firefox" '(:class "Firefox")))

;; ---------------------------------------
;; Hooks

(add-hook *start-hook*
          (lambda ()
            (run-shell-command "xsetroot -solid rgb:11/11/11")
            (run-shell-command "xsetroot -cursor_name left_ptr -fg black -bg white")
            ;;(run-shell-command "wmname LG3D")
            (run-shell-command "pgrep mpd || mpd ~/.mpdconf")))

;; ---------------------------------------
;; Key bindinds

;; s-[0-9] moves to a numbered group.
(loop for i from 1 to 9
   do (define-key *top-map* (kbd (format nil "s-~A" i))
	(format nil "gselect ~A" i)))

;; Query addresses
(defvar *query-map* nil
  "The keymap with net queries (e.g. IMDB)")

(setf *query-map*
      (let ((m (make-sparse-keymap)))
        (define-key m (kbd "i") "imdb")
        (define-key m (kbd "g") "google")
        (define-key m (kbd "w") "wikipedia")
        m))

;; Swap quoteright and " in commands
(define-key *groups-map* (kbd "quoteright") "grouplist")
(define-key *groups-map* (kbd "\"") "gselect")

(setf *root-map*
      (let ((m (make-sparse-keymap)))
        (define-key m (kbd "c") "exec xterm")
        (define-key m (kbd "e") "emacs")
        (define-key m (kbd "b") "banish")
        (define-key m (kbd "a") "time")
        (define-key m (kbd "C-g") "abort")
        (define-key m (kbd "t") "send-escape")
        (define-key m (kbd ";") "colon")
        (define-key m (kbd ":") "eval")
        (define-key m (kbd "C-m") "lastmsg")
        (define-key m (kbd "G") "vgroups")
        (define-key m (kbd "g") '*groups-map*)
        (define-key m (kbd "h") '*help-map*)
        (define-key m (kbd "m") '*mpd-map*)
        (define-key m (kbd "q") '*query-map*)
        (define-key m (kbd "N") '*notifications-map*)
        (define-key m (kbd "!") "exec dmenu_run")
        (define-key m (kbd "quoteright") "windowlist")
        (define-key m (kbd "\"") "select")
        (define-key m (kbd "n") "pull-hidden-next")
        (define-key m (kbd "p") "pull-hidden-previous")
        (define-key m (kbd "M-n") "next")
        (define-key m (kbd "M-p") "prev")
        (define-key m (kbd "C-M-n") "next-in-frame")
        (define-key m (kbd "C-M-p") "prev-in-frame")
        (define-key m (kbd "W") "place-existing-windowns")
        (define-key m (kbd "C-t") "pull-hidden-other")
        (define-key m (kbd "M-t") "other-in-frame")
        (define-key m (kbd "R") "remove")
        (define-key m (kbd "s") "vsplit")
        (define-key m (kbd "S") "hsplit")
        (define-key m (kbd "r") "iresize")
        (define-key m (kbd "o") "fnext")
        (define-key m (kbd "M-TAB") "fprev")
        (define-key m (kbd "f") "fselect")
        (define-key m (kbd "F") "curframe")
        (define-key m (kbd "-") "fclear")
        (define-key m (kbd "Q") "only")
        ;; (define-key m (kbd "Up") "move-focus up")
        ;; (define-key m (kbd "Down") "move-focus down")
        ;; (define-key m (kbd "Left") "move-focus left")
        ;; (define-key m (kbd "Right") "move-focus right")
        ;; (define-key m (kbd "M-Up") "move-window up")
        ;; (define-key m (kbd "M-Up") "move-window down")
        ;; (define-key m (kbd "M-up") "move-window left")
        ;; (define-key m (kbd "M-Up") "move-window right")
        (define-key m (kbd "+") "balance-frames")
        (define-key m (kbd "l") "redisplay")
        (define-key m (kbd "L") "exec xlock -mode blank")
        (define-key m (kbd "C-u") "next-urgert")
        (define-key m (kbd "w") "windows")
        (define-key m (kbd "k") "delete")
        (define-key m (kbd "K") "kill")
        (define-key m (kbd "C-N") "number")
        (define-key m (kbd "#") "mark")
        (define-key m (kbd "C-F") "fullscreen")
        (define-key m (kbd "A") "title")
        (define-key m (kbd "i") "info")
        m))

(define-key *root-map* (kbd "m") '*mpd-map*)
(setf *mpd-playlist-menu-map*
      (let ((m (make-sparse-keymap)))
        (define-key m (kbd "C-p") 'menu-up)
        (define-key m (kbd "C-n") 'menu-down)
        (define-key m (kbd "C-g") 'menu-abort)
        (define-key m (kbd "ESC") 'menu-abort)
        (define-key m (kbd "M-p") (mpd-menu-action :mpd-playlist-move-up))
        (define-key m (kbd "M-n") (mpd-menu-action :mpd-playlist-move-down))
        (define-key m (kbd "d") (mpd-menu-action :mpd-playlist-delete))
        (define-key m (kbd "RET") (mpd-menu-action :mpd-playlist-play))
        m))

(setf *mpd-browse-menu-map*
      (let ((m (make-sparse-keymap)))
        (define-key m (kbd "C-p") 'menu-up)
        (define-key m (kbd "C-n") 'menu-down)
        (define-key m (kbd "C-g") 'menu-abort)
        (define-key m (kbd "ESC") 'menu-abort)
        (define-key m (kbd "RET") (mpd-menu-action :mpd-browse-add-and-quit))
        (define-key m (kbd "S-RET") (mpd-menu-action :mpd-browse-add))
        (define-key m (kbd "C-f") (mpd-menu-action :mpd-browse-next))
        (define-key m (kbd "C-b") (mpd-menu-action :mpd-browse-previous))
        m))
